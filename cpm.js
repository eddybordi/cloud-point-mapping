let server = false
if(typeof window === 'undefined') server = true

const radius = 20
const center_x = 600
const center_y = 600

const check = (x, y) => {
  const dist = 300
  
  if (x < (center_x - dist) || x > (center_x + dist) || y < (center_y - dist) || y > (center_y + dist)) return false
  return true
}

const getDistances = (p, pixels) => {
    const dist = []
    
    for (let pixel of pixels) {
      if (!(p[0] === pixel[0] && p[1] === pixel[1])) {
      	let d = Math.round(Math.sqrt(Math.pow((p[0] - pixel[0]), 2) + Math.pow((p[1] - pixel[1]), 2)))
        dist.push(d)
      }
    }
                
    return dist
}

const point = (squares, angle, distance) => {
	const x = Math.round(center_x - radius * Math.cos(- (angle + 0) * Math.PI / 180) * distance)
  const y = Math.round(center_y + radius * Math.sin(- (angle + 0) * Math.PI / 180) * distance)

  squares[x + '_' + y] = [x, y]
}

const raw = (squares, data) => {
	for (let d of data) point(squares, d[0], d[1]/100)
}

const calc = squares => {
	const pixels = []
  const distances = {}
  
  for (let n in squares) {
  	let pixel = check(squares[n][0], squares[n][1])
    if(pixel) pixels.push([squares[n][0], squares[n][1]])
  }

  for (let p of pixels) {
  	let d = getDistances(p, pixels)
    distances[p[0] + '_' + p[1]] = [p, d]
  }

  return distances
}

const compare = (distances1, distances2) => {
	if(server) console.time('compare')
	console.log('start...')

	const matching = {}

	for(let d1 in distances1) {
		for(let d2 in distances2) {
			let x = Math.abs(distances1[d1][0][0] - distances2[d2][0][0])
			let y = Math.abs(distances1[d1][0][1] - distances2[d2][0][1])
			if(x > 200 || y > 200) break
				
			let match = 0
			distances1[d1][1].forEach(setA => {
				let f = distances2[d2][1].find(setB => {
					return (setA === setB)
				})
				if(f) match++
			})
			let key = distances1[d1][0][0]+'_'+distances1[d1][0]+'_'+distances2[d2][0][0]+'_'+distances2[d2][0][1]
			matching[key] = [distances1[d1][0], distances2[d2][0], match]
		}
	}

	let arrmatching = []
	for(let k in matching) arrmatching.push(matching[k])

	arrmatching.sort((a, b) => {
		return b[2] - a[2]
	})

  const filtered = []

	let count = 0
	for(let r of arrmatching) {
		if(!count) {
			filtered.push(r)
			count++
		}
		else {
			let ax = Math.abs(r[0][0] - filtered[0][0][0])
			let ay = Math.abs(r[0][1] - filtered[0][0][1])

			let bx = Math.abs(r[1][0] - filtered[0][1][0])
			let by = Math.abs(r[1][1] - filtered[0][1][1])

			if(ax + ay > 50 && bx + by > 50) {
				filtered.push(r)
				count++
			}
		}

		if(count === 3) break
	}

	if(server) console.timeEnd('compare')
	return filtered
}

if(server) {
	let parse = (data, color) => {
		data = data.replace(/\[/g, '')
		data = data.replace(/\]/g, '')
		data = data.replace(/\(/g, '')
		data = data.replace(/\)/g, '')
		data = data.replace(/\s/g, '')
		data = data.split(',')

		let fData = []
		let i = 0
		let arr = []
		for(let d of data) {
			i++
			let v = parseFloat(d)
			if(i !== 1) arr.push(v)
			if(i === 3) {
				fData.push(arr)
				arr = []
				i = 0
			}
		}

		return fData
	}

	let scan1 = '[(12, 352.046875, 3506.75), (15, 354.515625, 3749.5), (15, 355.78125, 3743.0), (15, 356.984375, 3934.5), (8, 3.015625, 971.25), (6, 4.296875, 983.5), (9, 5.578125, 993.25), (9, 6.765625, 1001.0), (11, 8.046875, 1011.5), (10, 9.21875, 1019.75), (9, 10.421875, 1019.0), (9, 11.703125, 1035.75), (8, 12.96875, 1048.5), (10, 14.1875, 1052.5), (6, 15.4375, 1091.0), (15, 18.5625, 1980.5), (15, 19.859375,1756.25), (15, 21.1875, 1648.0), (15, 22.4375, 1653.25), (15, 23.640625, 1675.25), (15, 25.171875, 1333.25), (15, 26.359375, 1315.0), (15, 27.671875, 1314.0), (15, 29.109375, 1057.75), (15, 30.421875, 1052.0), (15, 31.65625, 1052.25), (15,32.859375, 1062.25), (15, 34.421875, 878.75), (15, 35.6875, 853.0), (15, 36.9375, 822.25), (15, 38.265625, 794.0), (15, 39.59375, 768.75), (15, 40.921875, 744.5), (15, 42.234375, 721.0), (15, 43.609375, 701.0), (15, 44.84375, 683.0), (15, 46.125, 664.0), (15, 47.484375, 648.5), (15, 48.71875, 632.5), (15, 50.09375, 617.5), (15, 51.359375, 599.5), (15, 52.53125, 598.75), (15, 53.796875, 611.75), (15, 54.984375, 626.75), (15, 56.15625, 642.5), (15, 57.484375, 658.0), (15, 58.609375, 675.25), (15, 59.71875, 696.0), (15, 63.046875, 762.5), (15, 64.09375, 789.0), (15, 65.625, 692.75), (15, 66.78125, 689.75), (15, 68.109375, 681.25), (15, 69.375, 673.75), (15, 70.71875, 667.25), (15, 71.859375, 660.5), (15, 73.171875, 655.0), (15, 74.265625, 650.5), (15, 75.515625, 645.5), (15, 76.90625, 640.25), (15, 78.046875, 636.75), (15, 79.265625, 632.25), (15, 80.609375, 628.75), (15, 81.9375, 624.25), (15, 83.046875, 622.0), (15, 84.375, 619.25), (15, 85.203125, 616.5), (15, 86.25, 615.25), (15, 87.65625, 613.25), (15, 88.6875, 612.0), (15, 90.09375, 609.75), (15, 91.234375, 609.25), (15, 92.34375, 608.75), (15, 93.6875, 606.25), (15, 94.921875, 605.75), (15, 96.09375, 607.0), (15, 97.171875, 607.0), (15, 98.453125, 609.25), (15, 99.578125, 609.75), (15, 100.890625, 612.5),(15, 102.171875, 612.25), (15, 103.203125, 615.25), (15, 104.46875, 616.75), (15, 105.640625, 619.5), (15, 106.96875, 621.5), (15, 108.140625, 624.25), (15, 109.0, 629.25), (15, 110.3125, 632.5), (15, 111.59375, 635.5), (15, 112.625, 640.0), (15, 113.90625, 644.0), (15, 115.0625, 649.75), (15, 116.1875, 655.5), (15, 117.421875, 660.25), (15, 118.5625, 665.5), (15, 119.859375, 671.25), (15, 121.046875, 678.5), (15, 122.171875, 684.5), (15, 123.328125, 694.5), (15, 124.5, 701.75), (15, 125.640625, 704.75), (15, 128.53125, 1146.0), (15, 129.640625, 1160.25), (15, 130.828125, 1179.75), (15, 132.09375, 1197.75), (15, 133.1875, 1217.0), (15, 134.421875, 1236.0), (15, 135.609375, 1258.75), (15, 136.765625, 1281.5), (15, 137.984375, 1304.75), (15, 139.171875, 1329.5), (15, 140.265625, 1355.0), (15, 141.453125, 1386.5), (15, 142.671875, 1417.75), (15, 143.828125, 1447.75), (15, 145.046875, 1485.5), (15, 146.171875, 1522.0), (15, 147.40625, 1560.25), (15,148.546875, 1604.5), (15, 149.765625, 1626.75), (15, 150.921875, 1606.75), (15,152.203125, 1579.25), (15, 153.375, 1551.5), (15, 154.59375, 1550.5), (15, 155.96875, 1566.0), (15, 157.203125, 1549.25), (15, 158.40625, 1534.0), (15, 159.625, 1526.5), (15, 160.90625, 1499.0), (15, 162.109375, 1487.75), (15, 163.296875, 1472.0), (15, 164.53125, 1463.25), (15, 165.734375, 1448.5), (15, 167.0, 1442.25), (15, 168.21875, 1429.0), (15, 169.375, 1421.75), (15, 170.65625, 1410.5), (15, 171.875, 1405.75), (15, 173.03125, 1398.0), (15, 174.296875, 1388.25), (15, 175.515625, 1387.5), (15, 176.71875, 1378.25), (15, 177.9375, 1376.5), (15, 179.28125, 1367.25), (15, 180.484375, 1378.5), (15, 181.71875, 1368.75), (15, 182.9375, 1364.0), (15, 184.15625, 1365.0), (15, 185.390625, 1366.5), (15, 186.578125, 1328.25), (15, 187.796875, 1322.75), (15, 189.015625, 1336.0), (15, 190.265625, 1336.25), (15, 191.421875, 1339.0), (15, 192.671875, 1341.25), (15, 193.9375, 1343.25), (15, 195.09375, 1352.25), (15, 196.3125, 1357.25), (15, 197.53125, 1363.0), (15, 198.734375, 1368.0), (15, 199.921875, 1380.0), (15, 201.203125, 1384.5),(15, 202.359375, 1394.75), (15, 203.734375, 1402.0), (15, 204.953125, 1412.0), (15, 206.125, 1424.25), (15, 207.328125, 1436.5), (15, 208.59375, 1451.25), (15,209.8125, 1464.5), (15, 211.03125, 1474.25), (15, 212.1875, 1494.0), (15, 213.4375, 1515.5), (15, 214.65625, 1527.0), (15, 215.8125, 1546.0), (15, 217.03125, 1568.5), (15, 218.25, 1589.75), (15, 219.46875, 1609.5), (15, 220.6875, 1629.75),(15, 221.90625, 1656.0), (13, 223.09375, 1687.75), (9, 224.578125, 1349.25), (12, 225.78125, 1373.0), (12, 227.046875, 1398.25), (8, 228.21875, 1420.25), (9, 229.46875, 1457.5), (9, 230.625, 1481.25), (10, 231.875, 1518.25), (9, 233.046875, 1555.25), (8, 237.890625, 1723.0), (15, 249.859375, 2773.75), (15, 251.125, 2743.25), (15, 252.34375, 2717.5), (15, 253.609375, 2698.75), (15, 254.828125, 2681.25), (15, 256.078125, 2652.5), (15, 257.3125, 2625.75), (15, 258.5, 2608.0), (15, 259.78125, 2597.0), (15, 261.0, 2587.0), (15, 262.21875, 2572.25), (15, 263.46875, 2561.25), (15, 264.921875, 1856.75), (15, 266.125, 1844.25), (15, 267.390625, 1830.75), (15, 270.859375, 2526.75), (15, 272.078125, 2515.75), (15, 273.3125, 2515.75), (15, 274.625, 2510.5), (15, 275.84375, 2519.25), (15, 277.078125, 2517.5), (15, 278.34375, 2514.5), (15, 279.5625, 2523.25), (15, 280.78125, 2535.0), (15, 281.984375, 2538.75), (15, 283.21875, 2545.25), (15, 284.5, 2296.75), (15, 285.765625, 2298.0), (15, 287.015625, 2236.5), (15, 288.21875, 2263.0), (15,289.796875, 1488.25), (15, 291.109375, 1406.0), (15, 292.40625, 1348.75), (15, 293.65625, 1319.25), (15, 294.90625, 1281.75), (15, 296.328125, 1068.5), (15, 297.671875, 1011.0), (15, 298.953125, 952.25), (15, 300.359375, 907.75), (15, 301.65625, 865.25), (15, 302.984375, 829.75), (15, 304.203125, 800.0), (15, 305.5625, 785.5), (15, 306.765625, 774.75), (15, 308.0, 776.25), (15, 309.359375, 714.0), (15, 310.8125, 698.0), (15, 312.03125, 688.5), (15, 313.140625, 683.5), (15, 314.390625, 682.5), (15, 315.65625, 686.75), (15, 316.9375, 696.25), (15, 318.15625, 706.75), (15, 319.21875, 722.0), (15, 320.4375, 737.0), (15, 321.71875, 753.75), (15, 322.953125, 773.0), (15, 324.265625, 792.0), (15, 325.4375, 814.25), (15, 326.609375, 839.0), (15, 327.78125, 871.5), (15, 330.09375, 926.5), (15, 331.359375, 954.75), (15, 332.484375, 987.5), (15, 333.78125, 1022.5), (15, 334.953125, 1058.5), (15, 336.109375, 1104.0), (15, 337.25, 1153.0), (15, 338.5, 1209.25), (15, 339.640625, 1268.25), (15, 342.84375, 2349.5), (15, 344.109375, 2370.25), (15, 346.359375, 3612.5), (15, 347.625, 3594.5)]'
	let scan2 = '[(15, 352.578125, 715.75), (15, 353.875, 702.75), (15, 355.15625, 690.75), (15,356.375, 678.5), (15, 357.78125, 667.75), (15, 358.96875, 656.5), (15, 0.296875, 648.0), (15, 1.5625, 640.25), (15, 2.84375, 632.25), (15, 4.109375, 627.0), (15, 5.296875, 625.25), (15, 6.578125, 620.75), (15, 7.765625, 621.0), (15, 8.9375, 630.0), (15, 10.25, 630.0), (15, 11.46875, 617.5), (15, 12.875, 607.0), (15, 14.1875, 601.0), (15, 15.421875, 598.25), (15, 16.84375, 596.25), (15, 18.0, 599.0), (15, 19.1875, 604.75), (15, 20.3125, 615.5), (15, 21.625, 637.25), (15, 22.765625, 681.25), (15, 23.78125, 744.5), (15, 32.171875, 3852.0), (15, 33.421875, 3864.25), (15, 34.484375, 5029.75), (15, 35.734375, 4975.75), (15, 36.96875, 4985.0), (15, 38.203125, 4989.75), (15, 39.453125, 4996.75), (15, 40.703125, 4996.75), (15, 42.078125, 3394.25), (15, 43.328125, 3377.0), (15, 44.59375, 3213.5), (10, 49.046875, 1193.5), (9, 50.359375, 1197.5), (10, 51.515625, 1218.75), (11, 52.78125, 1226.5), (10, 54.03125, 1245.0), (9, 55.203125, 1241.5), (12, 56.453125, 1259.75), (12, 57.71875, 1267.75), (12, 58.9375, 1273.0), (15, 59.953125, 1290.0), (15, 61.203125, 1301.5), (15, 62.421875, 1312.0), (15, 63.65625, 1321.0), (11, 64.859375, 1307.5), (15, 67.15625, 1564.75), (15, 68.390625, 1579.5), (15, 69.75, 1327.75), (15, 71.0, 1314.0), (15, 72.25, 1319.0), (15, 73.421875, 1342.5), (15, 75.515625, 2064.0), (15, 77.265625, 1203.75), (15, 78.5625, 1180.75), (15, 79.78125, 1155.5), (15, 81.078125, 1128.0), (15, 82.34375, 1104.75), (15, 83.546875, 1083.5), (15, 84.40625, 1062.5), (15, 85.625, 1043.0), (15, 86.90625, 1024.75), (15, 88.140625, 1006.5), (15, 89.359375, 988.0), (15, 90.6875, 973.0), (15, 91.84375, 981.75), (9, 92.96875, 1017.5), (15, 94.140625, 1045.75), (15, 95.34375, 1078.5), (15, 96.5, 1117.25), (15, 97.640625, 1158.5), (15, 98.96875, 1076.5), (15, 100.234375, 1071.25), (15, 101.4375, 1060.0), (15, 102.703125, 1051.75), (15, 103.859375, 1043.0), (15, 105.046875, 1033.0), (15, 106.3125, 1022.75), (15, 107.578125, 1018.25), (15, 108.625, 1009.5), (15, 109.84375, 1004.75), (15,111.0625, 998.0), (15, 112.296875, 992.25), (15, 113.5, 987.25), (15, 114.625, 983.5), (15, 115.84375, 981.0), (15, 117.109375, 974.5), (15, 118.28125, 971.25), (15, 119.546875, 971.75), (15, 122.8125, 1257.0), (15, 123.984375, 1254.75), (15, 125.546875, 962.75), (15, 126.71875, 961.25), (15, 128.015625, 964.25), (15,129.15625, 964.0), (15, 130.34375, 966.25), (15, 131.578125, 968.5), (15, 132.734375, 970.5), (15, 133.9375, 973.25), (15, 135.21875, 974.5), (15, 136.390625, 980.5), (15, 137.578125, 984.25), (15, 140.8125, 1347.75), (15, 142.0, 1358.0), (15, 143.171875, 1365.25), (15, 144.359375, 1379.75), (15, 145.578125, 1386.0), (15, 146.765625, 1396.5), (15, 148.0, 1408.5), (15, 149.109375, 1420.25), (15, 150.34375, 1433.25), (15, 151.546875, 1446.5), (15, 152.765625, 1463.75), (15, 153.953125, 1474.25), (15, 155.296875, 1496.25), (15, 156.515625, 1514.75), (15, 157.734375, 1530.5), (15, 158.953125, 1550.25), (15, 160.140625, 1574.75), (15, 161.3125, 1598.0), (15, 162.546875, 1619.75), (15, 163.734375, 1647.5), (15, 164.953125, 1668.0), (15, 166.140625, 1693.75), (15, 167.375, 1724.0), (15, 168.53125, 1754.5), (15, 169.765625, 1713.75), (15, 171.015625, 1678.25), (15, 172.234375, 1632.75), (15, 173.453125, 1656.0), (15, 174.71875, 1624.75), (15, 175.875, 1598.0), (15, 177.109375, 1571.0), (15, 178.375, 1538.0), (15, 179.78125, 1517.25), (15, 181.0, 1492.5), (15, 182.265625, 1469.5), (15, 183.484375, 1445.75), (15, 184.71875, 1430.0), (15, 185.9375, 1409.0), (15, 187.234375, 1394.25), (15, 188.390625, 1373.75), (15, 189.671875, 1358.75), (15, 190.90625, 1344.0), (15, 192.140625, 1333.5), (15, 193.328125, 1318.5), (15, 194.609375, 1305.0), (15, 195.796875, 1303.5), (15, 197.03125, 1285.25), (15, 198.265625, 1274.5), (15, 199.546875, 1268.25), (15, 200.796875, 1254.5), (15, 202.0625, 1203.25), (15, 203.296875, 1204.5), (15, 204.484375, 1201.0), (15, 205.734375, 1197.25), (15, 206.984375, 1193.5), (15, 208.25, 1186.25), (15, 209.390625, 1183.25), (15, 210.703125, 1182.25), (15, 211.859375, 1180.75), (15, 213.078125, 1180.25), (15, 214.28125, 1177.75), (15, 215.5625, 1178.25), (15, 216.734375, 1178.0), (15, 217.96875, 1180.0), (15, 219.25, 1179.0), (15, 220.4375, 1180.5), (15, 221.71875, 1181.75), (15,222.875, 1184.0), (15, 224.125, 1186.75), (15, 225.3125, 1187.5), (15, 226.515625, 1195.75), (15, 227.875, 1199.5), (15, 229.09375, 1203.5), (15, 230.375, 1212.75), (15, 231.515625, 1216.75), (15, 232.78125, 1225.0), (15, 234.03125, 1232.75), (15, 235.234375, 1242.75), (15, 236.46875, 1252.5), (15, 237.625, 1262.25), (15, 238.890625, 1276.5), (15, 240.09375, 1283.5), (15, 241.359375, 1296.25), (15, 242.546875, 1305.75), (15, 243.71875, 1322.0), (15, 245.015625, 1337.5), (15,246.203125, 1352.0), (11, 247.671875, 1119.75), (15, 251.125, 1424.5), (15, 252.3125, 1445.75), (15, 253.59375, 1353.25), (7, 255.1875, 1059.0), (15, 256.453125, 999.5), (15, 257.65625, 976.0), (15, 258.9375, 969.5), (15, 260.1875, 989.75), (15, 261.359375, 1009.25), (15, 262.546875, 1032.5), (15, 263.71875, 1056.5), (15, 265.015625, 1080.0), (15, 266.140625, 1107.75), (15, 267.34375, 1134.5), (15, 268.5625, 1166.75), (15, 269.71875, 1199.75), (15, 270.90625, 1234.0), (15, 272.140625, 1271.75), (15, 273.359375, 1311.5), (15, 274.578125, 1354.25), (15, 275.8125, 1405.5), (15, 277.03125, 1456.5), (15, 278.25, 1511.25), (15, 279.40625, 1567.75), (15, 280.625, 1641.75), (15, 281.796875, 1722.75), (15, 283.03125, 1757.25), (15, 284.1875, 1874.5), (10, 285.421875, 1915.5), (15, 286.5, 2295.25),(15, 287.75, 2284.25), (15, 289.0, 2265.25), (15, 290.25, 2248.0), (15, 291.46875, 2237.5), (15, 292.703125, 2229.75), (15, 293.953125, 2226.5), (15, 297.140625, 1104.25), (15, 298.390625, 1097.0), (15, 299.703125, 1093.0), (15, 300.90625,1111.0), (15, 302.21875, 1084.0), (15, 303.46875, 1078.0), (15, 304.71875, 1072.25), (15, 305.890625, 1076.75), (15, 308.953125, 2178.25), (15, 310.203125, 2183.0), (15, 311.421875, 2183.5), (15, 312.6875, 2186.0), (15, 313.875, 2194.5), (15, 315.15625, 2199.25), (15, 316.375, 2203.25), (15, 317.625, 2214.75), (15, 318.859375, 2232.0), (15, 320.140625, 2114.0), (15, 321.4375, 1872.0), (15, 322.84375, 1719.75), (15, 324.140625, 1622.0), (15, 325.46875, 1542.75), (15, 326.765625, 1431.25), (15, 328.046875, 1327.75), (15, 329.40625, 1255.5), (15, 330.734375, 1192.5), (15, 331.953125, 1144.25), (15, 333.3125, 1105.25), (15, 334.5625, 1068.25), (15, 335.890625, 1039.0), (15, 337.171875, 1015.25), (15, 338.46875, 969.75), (15, 339.78125, 928.0), (15, 340.984375, 896.75), (15, 342.359375, 866.25), (15, 343.640625, 839.75), (15, 344.96875, 815.0), (15, 346.25, 796.0), (15, 347.4375, 780.5), (15, 348.890625, 761.75), (15, 350.1875, 744.5), (15, 351.3125,730.0)]'

	const squares1 = {}
	const squares2 = {}

	raw(squares1, parse(scan1))
	raw(squares2, parse(scan2))

	const distances1 = calc(squares1)
	const distances2 = calc(squares2)

	const res = compare(distances1, distances2)

	console.log('matching:', res[0][0], res[0][1], 'score:', res[0][2])
	console.log('matching:', res[1][0], res[1][1], 'score:', res[1][2])
}